syntax = "proto3";

package TW.Substrate.Proto;
option java_package = "wallet.core.jni.proto";

message Era {
  // recent block number (called phase in polkadot code), should match block hash
  uint64 block_number = 1;

  // length of period, calculated from block number, e.g. 64
  uint64 period = 2;
}

message Balance {
  message Transfer {
    int32 module_index = 1;
    int32 method_index = 2;
    string to_address = 3;
    bytes value = 4; // BigInteger
    string memo = 5; // max 32 chars
  }
  message BatchTransfer {
    int32 module_index = 1;
    int32 method_index = 2;
    repeated Transfer transfers = 3;
  }
  message AssetTransfer {
    int32 module_index = 1;
    int32 method_index = 2;
    string to_address = 3;
    bytes value = 4; // BigInteger
    uint32 asset_id = 5;
    uint32 fee_asset_id = 6;
  }
  message BatchAssetTransfer {
    int32 module_index = 1;
    int32 method_index = 2;
    uint32 fee_asset_id = 3;
    repeated AssetTransfer transfers = 4;
  }
  oneof message_oneof {
    Transfer transfer = 1;
    BatchTransfer batch_transfer = 2;
    AssetTransfer asset_transfer = 3;
    BatchAssetTransfer batch_asset_transfer = 4;
  }
}

message Authorization {
  message JoinIdentity {
    message Data {
      bytes data = 1;
    }
    message AuthData {
      Data asset = 1;      // authorization data, empty means all permissions, null means no persimission
      Data extrinsic = 2;  // authorization data, empty means all permissions, null means no persimission
      Data portfolio = 3;  // authorization data, empty means all permissions, null means no persimission
    }
    int32 module_index = 1;
    int32 method_index = 2;
    string target = 3;   // address that will be added to the Identity
    AuthData data = 4;   // authorization data, null means all permissions
    uint64 expiry = 5;   // expire time, unix seconds
  }
  oneof message_oneof {
    JoinIdentity join_identity = 1;
  }
}

message Identity {
  message JoinIdentityAsKey {
    int32 module_index = 1;
    int32 method_index = 2;
    uint64 auth_id = 3;
  }
  oneof message_oneof {
    JoinIdentityAsKey join_identity_as_key = 1;
  }
}

message PolymeshCall {
  oneof message_oneof {
    Authorization authorization_call = 1;
    Identity identity_call = 2;
  }
}

// Input data necessary to create a signed transaction.
message SigningInput {
  // Recent block hash, or genesis hash if era is not set
  bytes block_hash = 1;

  bytes genesis_hash = 2;

  // Current account nonce
  uint64 nonce = 3;

  uint32 spec_version = 4;
  uint32 transaction_version = 5;
  bytes tip = 6;  // big integer

  // Optional time validity limit, recommended, for replay-protection.  Empty means Immortal.
  Era era = 7;

  bytes private_key = 8;
  int32 network = 9;
  oneof message_oneof {
    Balance balance_call = 10;
  }
  bool multi_address = 11;
  PolymeshCall polymesh_call = 12;
}

// Transaction signing output.
message SigningOutput {
  // Signed and encoded transaction bytes.
  bytes encoded = 1;
}

